name: CI

# Run on pushes to main/develop and all PRs to main
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.23.0'
  NODE_VERSION: '20'

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }} # Cache based on go.sum
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Install dependencies
      run: |
        cd backend
        go mod download
    
    - name: Run ALL tests (including PostgreSQL integration tests)
      run: |
        cd backend
        # Run all tests without -short flag to include integration tests
        # Docker is available in GitHub Actions, so testcontainers will work
        go test -v -race -coverprofile=coverage.out ./... | tee test-output.log
        
    - name: Show test summary
      if: always()
      run: |
        cd backend
        echo "=== Test Summary ==="
        # Pattern explanation:
        # "^=== RUN" - matches test start markers (e.g., "=== RUN TestFoo")
        echo "Total tests run: $(grep -c "^=== RUN" test-output.log || echo 0)"
        # "^--- PASS:" - matches passed test markers (e.g., "--- PASS: TestFoo (0.00s)")
        echo "Passed tests: $(grep -c "^--- PASS:" test-output.log || echo 0)"
        # "^--- FAIL:" - matches failed test markers (e.g., "--- FAIL: TestBar (0.01s)")
        echo "Failed tests: $(grep -c "^--- FAIL:" test-output.log || echo 0)"
        # "^--- SKIP:" - matches skipped test markers (e.g., "--- SKIP: TestBaz (0.00s)")
        echo "Skipped tests: $(grep -c "^--- SKIP:" test-output.log || echo 0)"
        
        # Show any skipped tests
        # -q flag: quiet mode, just check if pattern exists
        if grep -q "^--- SKIP:" test-output.log; then
          echo ""
          echo "=== Skipped Tests ==="
          grep "^--- SKIP:" test-output.log || true
        fi
        
        # Show any failed tests
        # -q flag: quiet mode, just check if pattern exists
        if grep -q "^--- FAIL:" test-output.log; then
          echo ""
          echo "=== Failed Tests ==="
          grep "^--- FAIL:" test-output.log || true
        fi
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.out
        flags: backend
        name: backend-coverage
    
    - name: Run benchmarks
      run: |
        cd backend
        # -bench=. runs all benchmarks
        # -benchmem includes memory allocation stats
        # -run=^$ skips normal tests (^$ is regex that matches nothing)
        go test -bench=. -benchmem -run=^$ ./internal/vault/... | tee benchmark.txt
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: backend/benchmark.txt

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run type checking
      run: |
        cd frontend
        npm run check
    
    # Frontend tests not implemented yet - skipping for now
    # - name: Run tests
    #   run: |
    #     cd frontend
    #     npm test
    
    - name: Build application
      run: |
        cd frontend
        npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/build

  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        working-directory: backend
        args: --timeout=5m --config=.golangci.yml --out-format=colored-line-number
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    # Frontend linting not configured yet - skipping for now  
    # - name: Lint frontend
    #   run: |
    #     cd frontend
    #     npm ci
    #     npm run lint

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Gosec Security Scanner
      uses: securego/gosec@master
      with:
        args: '-no-fail -fmt sarif -out gosec-results.sarif ./backend/...'
      continue-on-error: true
    
    - name: Check if Gosec SARIF file exists
      id: gosec-sarif-check
      run: |
        if [ -f gosec-results.sarif ]; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Upload Gosec SARIF file
      uses: github/codeql-action/upload-sarif@v3
      if: steps.gosec-sarif-check.outputs.exists == 'true'
      with:
        sarif_file: gosec-results.sarif
        category: gosec
      continue-on-error: true
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
      continue-on-error: true
    
    - name: Check if Trivy SARIF file exists
      id: trivy-sarif-check
      run: |
        if [ -f trivy-results.sarif ]; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Upload Trivy SARIF file
      uses: github/codeql-action/upload-sarif@v3
      if: steps.trivy-sarif-check.outputs.exists == 'true'
      with:
        sarif_file: trivy-results.sarif
        category: trivy
      continue-on-error: true

